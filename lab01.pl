parent(михаил_федорович, алексей_михайлович).

parent(алексей_михайлович, петр_1_алексеевич).
parent(наталья_нарышкина, петр_1_алексеевич).

parent(алексей_михайлович, иоанн_5_алексеевич).
parent(мария_ильинична, иоанн_5_алексеевич).

parent(алексей_михайлович, федор_алексеевич).
parent(мария_ильинична, федор_алексеевич).

parent(алексей_михайлович, софья_алексеевна).
parent(мария_ильинична, софья_алексеевна).

parent(иоанн_5_алексеевич, екатерина_иоанновна).
parent(иоанн_5_алексеевич, анна_иоанновна).

parent(петр_1_алексеевич, алексей_петрович).
parent(евдокия_федеровна,алексей_петрович).

parent(алексей_петрович, петр_2_алексеевич).

parent(петр_1_алексеевич, анна_петровна).
parent(екатерина_алексеевна, анна_петровна).

parent(петр_1_алексеевич, елизавета_петровна).
parent(екатерина_алексеевна, елизавета_петровна).

parent(анна_петровна, петр_3_федорович).

parent(петр_3_федорович, павел_1).
parent(екатерина_2_алексеевна, павел_1).

parent(илларион_лопухин, евдокия_федеровна).


male(михаил_федорович).
male(алексей_михайлович).
male(петр_1_алексеевич).
male(иоанн_5_алексеевич).
male(федор_алексеевич).
male(федор_алексеевич).
male(иоанн_5_алексеевич).
male(петр_1_алексеевич).
male(алексей_петрович).
male(петр_2_алексеевич).
male(петр_3_федорович).
male(павел_1).
male(илларион_лопухин).
female(наталья_нарышкина).
female(софья_алексеевна).
female(екатерина_иоанновна).
female(анна_иоанновна).
female(евдокия_федеровна).
female(анна_петровна).
female(екатерина_алексеевна).
female(елизавета_петровна).
female(екатерина_2_алексеевна).
female(мария_ильинична).


% Task 1
% Print all
% female(X).
% male(X).

% Task 2

% Построить базу данных Prolog отношения «является
% родителем». Провести несколько запросов к терминалу Prolog. Построить
% предикат children(X), который выводит всех детей X.

children(X):-parent(X, Y), write(Y).

% Task 3

% Построить предикат mother(X, Y), который проверяет,
% является ли X матерью Y. Построить предикат, mother(X), который выводит
% маму X.

mother(X, Y):- parent(X, Y), female(X).
mother(X):-mother(Y, X), write(Y).

% Task 4 Variant 9

% Построить предикат daughter(X, Y), который проверяет,
% является ли X дочерью Y. Построить предикат, daughter(X), который выводит
% дочь X.
daughter(X, Y) :- parent(Y, X), female(X).
daughter(X) :- daughter(Y, X), write(Y).

% Task 5

% Построить предикат brother(X, Y), который проверяет,
% является ли X братом Y. Построить предикат brothers(X), который выводит
% всех братьев X.

brother(X, Y) :- parent(Z, X), parent(Z, Y), male(X), X \= Y.
brothers(X) :- setof(Y, brother(Y, X), Set), write(Set).

% Task 6

% Построить предикат wife(X, Y), который проверяет,
% является ли X женой Y. Построить предикат wife(X), который выводит жену X.

wife(наталья_нарышкина, алексей_михайлович).
wife(мария_ильинична, алексей_михайлович).
wife(евдокия_федеровна, петр_1_алексеевич).
wife(екатерина_алексеевна, петр_1_алексеевич).
wife(екатерина_2_алексеевна, петр_3_федорович).

wife(X) :- wife(Y, X), write(Y).

% Task 7

% Построить предикат b_s(X,Y), который проверяет, являются
% ли X и Y родными братом и сестрой или братьями или сестрами. Построить
% предикат b_s(X), который выводит всех братьев или сестер X.

b_s(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
b_s(X) :- setof(Y, b_s(X, Y), Set), write(Set).

% Task 8.

% Построить предикат grand_pa(X, Y), который проверяет,
% является ли X дедушкой Y. Дополнить базу фактов таким образом, чтобы
% учитывать, что у каждого ребенка 2 бабушки и 2 дедушки. Внести изменения
% в дерево семьи. Построить предикат grand_pas(X), который выводит всех
% дедушек X.



grand_pa(X, Y) :- parent(X, Z), parent(Z, Y), male(X).
grand_pas(X) :- grand_pa(Y, X), write(Y).

% grand_pas(алексей_петрович).

% Task 9

% Построить предикат grand_da(X, Y), который проверяет,
% является ли X внучкой Y. Построить предикат grand_dats(X), который
% выводит всех внучек X.

grand_da(X, Y) :- parent(Y, Z), parent(Z, X), female(X).
grand_dats(X) :- grand_da(Y, X), write(Y).

% grand_dats(алексей_михайлович).

% Task 10

% Построить предикат grand_pa_and_son(X,Y), который
% проверяет, являются ли X и Y дедушкой и внуком или внуком и дедушкой.

grand_pa_and_son(X,Y) :- grand_pa(X, Y); grand_pa(Y, X).

% grand_pa_and_son(иоанн_5_алексеевич, михаил_федорович).

% Task 11

% Построить предикат grand_ma_and_da(X,Y), который
% проверяет, являются ли X и Y бабушкой и внучкой или внучкой и бабушкой.

grand_ma_and_da(X,Y) :- grand_da(X, Y); grand_da(Y, X).

% grand_ma_and_da(анна_иоанновна, мария_ильинична).

% Task 12

% Построить предикат, который проверяет, является ли X
% дядей Y. Построить предикат, который выводит всех дядей X.

uncle(X, Y) :- parent(Z, X), parent(Z, W), parent(W, Y), male(X), X \= W.
uncle(X) :- setof(Y, uncle(Y, X), Set), write(Set).

% uncles(анна_иоанновна).

% Task 13

% Построить предикат, который проверяет, является ли X
% племянником Y. Построить предикат, который выводит всех племянников X.

male_cousin(X,Y) :- parent(Z, X), parent(W, Z), parent(W, Y), male(X), Z \= Y.
male_cousin(X) :- setof(Y, male_cousin(Y, X), Set), write(Set).

% Task 14
% Вывести всех двоюродных братьев и сестер

sibling_2(X, Y) :- parent(W, Z), parent(Z, X), parent(W, U), parent(U, Y), Z \= U.
sibling_2(X) :- sibling_2(Y, X), write(Y).